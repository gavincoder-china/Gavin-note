{"remainingRequest":"/Users/gavincoder/mycode/github/Gavin-note/vuepress/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/gavincoder/mycode/github/Gavin-note/vuepress/node_modules/@vuepress/theme-default/util/index.js","dependencies":[{"path":"/Users/gavincoder/mycode/github/Gavin-note/vuepress/node_modules/@vuepress/theme-default/util/index.js","mtime":1566811178775},{"path":"/Users/gavincoder/mycode/github/Gavin-note/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":1566811178782},{"path":"/Users/gavincoder/mycode/github/Gavin-note/vuepress/node_modules/babel-loader/lib/index.js","mtime":1566811178784}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}